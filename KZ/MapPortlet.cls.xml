<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="KZ.MapPortlet">
<Description>
Description</Description>
<Super>%DeepSee.Component.Portlet.abstractPortlet</Super>
<TimeCreated>63223,54909.281803</TimeCreated>

<Parameter name="INCLUDEFILES">
<Description>
Yandex map API</Description>
<Default><![CDATA[script:http://api-maps.yandex.ru/2.1/?load=package.full&lang=ru-RU]]></Default>
</Parameter>

<Property name="latitude">
<Description>

MAP -------------------------------------------------------------------------------------- MAP

Initial latitude (as a decimal number).</Description>
<Type>%ZEN.Datatype.float</Type>
<InitialExpression>60</InitialExpression>
</Property>

<Property name="longitude">
<Description>
Initial longitude (as a decimal number).</Description>
<Type>%ZEN.Datatype.float</Type>
<InitialExpression>85</InitialExpression>
</Property>

<Property name="zoom">
<Description>
Initial zoom level (0 shows entire globe).</Description>
<Type>%ZEN.Datatype.integer</Type>
<InitialExpression>2</InitialExpression>
</Property>

<Property name="mapType">
<Description>
Initial map display.</Description>
<Type>%ZEN.Datatype.string</Type>
<InitialExpression>"yandex#map"</InitialExpression>
<Parameter name="VALUELIST" value=",yandex#map,yandex#satellite,yandex#hybrid"/>
</Property>

<Property name="onaddplacemark">
<Description>

PLACEMARK ------------------------------------------------------------------------------- PLACEMARK

onaddplacemark event handler</Description>
<Type>%ZEN.Datatype.eventHandler</Type>
</Property>

<Property name="latitudeProperty">
<Description>
Name of property in data source that provides the latitude value for a placemark.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="longitudeProperty">
<Description>
Name of property in data source that provides the longitude value for a placemark.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="onclickplacemark">
<Description>
onclickplacemark event handler: if defined, this event is fired when a placemark is clicked.</Description>
<Type>%ZEN.Datatype.eventHandler</Type>
</Property>

<Property name="onrightclickplacemark">
<Description>
onrightclickplacemark event handler: if defined, this event is fired when a placemark is clicked.</Description>
<Type>%ZEN.Datatype.eventHandler</Type>
</Property>

<Property name="placemarkTitleProperty">
<Description>
Name of property in data source that provides the title of a placemark (used for tooltip text).</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="placemarkIconProperty">
<Description>
Name of property in data source that provides icon href for placemarks.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="placemarkIcon">
<Description>
Default placemark icon href.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="placemarkSpecialIcon">
<Description>
Special placemark icon href.                                                                     </Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="placemarkSpecialProperty">
<Description>
Special placemark property                                                                       </Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="placemarkIconSize">
<Description>
Placemark icon size (ignored if both placemarkIcon and placemarkIconProperty are not set).</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="onaddpolygon">
<Description>

POLYGON --------------------------------------------------------------------------------- POLYGON

onaddpolygon event handler</Description>
<Type>%ZEN.Datatype.eventHandler</Type>
</Property>

<Property name="coordsProperty">
<Description>
Name of property in data source that provides the coordinates array for a polygon.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="coordsJsFile">
<Description><![CDATA[
JS file containing "function loadCoordinates(polygonCoordsArray) {}" that populates a polygon coordinates associative array.
If <var>coordsJsFile</var> is specified then <var>coordsProperty</var> must contain name of the property that provides keys for the coordinates associative array.]]></Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="colorProperty">
<Description>
Name of property in data source that provides the color of a polygon.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="onclickpolygon">
<Description>
onclickpolygon event handler: if defined, this event is fired when a polygon is clicked.</Description>
<Type>%ZEN.Datatype.eventHandler</Type>
</Property>

<Property name="onrightclickpolygon">
<Description>
onrightclickpolygon event handler: if defined, this event is fired when a polygon is clicked.</Description>
<Type>%ZEN.Datatype.eventHandler</Type>
</Property>

<Property name="polygonTitleProperty">
<Description>
Name of property in data source that provides the title of a polygon (used for tooltip text).</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="placemarkDataProperties">
<Description>
List of properties in data source that provides data to be stored within the current placemark. This data is visible from onclick event handler.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="polygonDataProperties">
<Description>
List of properties in data source that provides data to be stored within the current polygon. This data is visible from onclick event handler.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="fillOpacity">
<Description>
Default fillOpacity for polygons.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="fillOpacityProperty">
<Description>
Name of property in data source that provides polygon fill opacity.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="hoverOpacity">
<Description>
Hover opacity for clickable polygons.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="strokeOpacity">
<Description>
Polygon stroke opacity.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="strokeWeight">
<Description>
Polygon stroke weight.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="isClickableProperty">
<Description>
Name of property in data source that provides "—Ålickable" attribute value for placemarks and polygons.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="saveBordersMethod">
<Description>
Method name for save slider range borders</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="getBordersMethod">
<Description>
Method name to get slider range borders</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="ondrilldown">
<Description>

COMMON --------------------------------------------------------------------------------- COMMON

ondrilldown event handler: if defined, this event is fired from drillDown() method.</Description>
<Type>%ZEN.Datatype.eventHandler</Type>
</Property>

<Property name="ondrillup">
<Description>
ondrillup event handler: if defined, this event is fired from drillUp() method.</Description>
<Type>%ZEN.Datatype.eventHandler</Type>
</Property>

<Property name="onapplyfilters">
<Description>
onapplyfilters event handler</Description>
<Type>%ZEN.Datatype.eventHandler</Type>
</Property>

<Property name="drillUpButtonPosition">
<Description><![CDATA[
Where "<< Back" button is located]]></Description>
<Type>%ZEN.Datatype.string</Type>
<InitialExpression>"top"</InitialExpression>
<Parameter name="VALUELIST" value="top,bottom"/>
</Property>

<Property name="getAdditionInfoForObjectById">
<Description>
Method name to get proxyObject with other info for object</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Method name="%OnGetPortletName">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit "KZ Map"
]]></Implementation>
</Method>

<Method name="%OnGetPortletIcon">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit "deepsee/world_48.gif"
]]></Implementation>
</Method>

<Method name="%OnGetPortletSettings">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pInfo:%List</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	kill pInfo
	// $LB(name,value,type,caption,title)

	set tTypeList = "ENUM^"_$$$Text("Roadmap","%DeepSee")_":yandex#map,"_
			$$$Text("Satellite","%DeepSee")_":yandex#satellite,"_
			$$$Text("Hybrid","%DeepSee")_":yandex#hybrid"
	
	set pInfo($I(pInfo)) = $LB("mapType","",tTypeList,$$$Text("Map Type","%DeepSee"),$$$Text("Initial display type for the map","%DeepSee"))
	set pInfo($I(pInfo)) = $LB("zoom",2,"%Integer",$$$Text("Zoom","%DeepSee"),$$$Text("Initial zoom level for the map","%DeepSee"))
	set pInfo($I(pInfo)) = $LB("latitude",60,"%Number",$$$Text("Starting latitude","%DeepSee"),$$$Text("Initial latitude for the map","%DeepSee"))
	set pInfo($I(pInfo)) = $LB("longitude",85,"%Number",$$$Text("Starting longitude","%DeepSee"),$$$Text("Initial longitude for the map","%DeepSee"))

	set pInfo($I(pInfo)) = $LB("onclickplacemark","","%ZEN.Datatype.eventHandler","'onclickplacemark' event handler","User callback for onclickplacemark event")
	set pInfo($I(pInfo)) = $LB("onrightclickplacemark","","%ZEN.Datatype.eventHandler","'onrightclickplacemark' event handler","User callback for onrightclickplacemark event")
	
	set pInfo($I(pInfo)) = $LB("latitudeProperty","","%ZEN.Datatype.string","Latitude property","Latitude property for placemarks")
	set pInfo($I(pInfo)) = $LB("longitudeProperty","","%ZEN.Datatype.string","Longitude property","Longitude property for placemarks")
	set pInfo($I(pInfo)) = $LB("placemarkTitleProperty","","%ZEN.Datatype.string","Placemark title property","Title property for placemarks")
	set pInfo($I(pInfo)) = $LB("placemarkDataProperties","","%ZEN.Datatype.string","Placemark data properties","List of data properties for placemarks")
	set pInfo($I(pInfo)) = $LB("placemarkIconProperty","","%ZEN.Datatype.string","Placemark icon property","Placemark icon property")
	set pInfo($I(pInfo)) = $LB("placemarkIcon","","%ZEN.Datatype.string","Placemark icon","Default placemark icon")
	set pInfo($I(pInfo)) = $LB("placemarkSpecialIcon","","%ZEN.Datatype.string","Placemark special icon","Placemark icon for special place")
	set pInfo($I(pInfo)) = $LB("placemarkSpecialProperty","","%ZEN.Datatype.string","Placemark special property","Placemark special property for special icon")
	set pInfo($I(pInfo)) = $LB("placemarkIconSize","","%ZEN.Datatype.string","Placemark icon size","Default placemark icon size (ingored if Placemark icon is not set)")
	
	set pInfo($I(pInfo)) = $LB("coordsJsFile","","%ZEN.Datatype.string","JS file with coords","JS file with javascript 'function loadCoordinates(polygonCoordsArray) {...}' that populates polygonCoordsArray argument with polygon coordinates keyed by values from the data source property specified in 'Polygon coords property' setting.")
	set pInfo($I(pInfo)) = $LB("coordsProperty","","%ZEN.Datatype.string","Polygon coords property","Data source property that provides coordinates for polygons if 'JS file with coords' is not specified. Otherwise this setting should contain name of data source property that provides keys for associative array which is populated by javascript code in 'JS file with coords'.")
	
	set pInfo($I(pInfo)) = $LB("onclickpolygon","","%ZEN.Datatype.eventHandler","'onclickpolygon' event handler","User callback for onclickpolygon event")	
	set pInfo($I(pInfo)) = $LB("onrightclickpolygon","","%ZEN.Datatype.eventHandler","'onrightclickpolygon' event handler","User callback for onrightclickpolygon event")	
	
	
	set pInfo($I(pInfo)) = $LB("colorProperty","","%ZEN.Datatype.string","Polygon —Åolor property","Color property for polygons")
	set pInfo($I(pInfo)) = $LB("polygonTitleProperty","","%ZEN.Datatype.string","Polygon title property","Title property for polygons")
	set pInfo($I(pInfo)) = $LB("polygonDataProperties","","%ZEN.Datatype.string","Polygon data properties","List of data properties for polygons")
	set pInfo($I(pInfo)) = $LB("fillOpacityProperty","","%ZEN.Datatype.string","Fill opacity property","Fill opacity property for polygons")
	set pInfo($I(pInfo)) = $LB("isClickableProperty","","%ZEN.Datatype.string","IsClickable flag property","IsClickable flag property for polygons")
	
	set pInfo($I(pInfo)) = $LB("fillOpacity","","%ZEN.Datatype.string","Fill opacity","Default fill opacity for polygons")
	set pInfo($I(pInfo)) = $LB("hoverOpacity","","%ZEN.Datatype.string","Hover opacity","Hover opacity for clickable polygons")
	set pInfo($I(pInfo)) = $LB("strokeOpacity","","%ZEN.Datatype.string","Stroke opacity","Stroke opacity for polygons")
	set pInfo($I(pInfo)) = $LB("strokeWeight","","%ZEN.Datatype.string","Stroke weight","Stroke weight for polygons")
	
	set pInfo($I(pInfo)) = $LB("drillUpButtonPosition","top","ENUM^top,bottom","Drill-up button position","Where ""<< Back"" button is located")
		
	set pInfo($I(pInfo)) = $LB("ondrilldown","","%ZEN.Datatype.eventHandler","'ondrilldown' event handler","User callback for ondrilldown event")
	set pInfo($I(pInfo)) = $LB("ondrillup","","%ZEN.Datatype.eventHandler","'ondrillup' event handler","User callback for ondrillup event")
	
	set pInfo($I(pInfo)) = $LB("onapplyfilters","","%ZEN.Datatype.eventHandler","'onapplyfilters' event handler","User callback for onapplyfilters event")
	set pInfo($I(pInfo)) = $LB("onaddpolygon","","%ZEN.Datatype.eventHandler","'onaddpolygon' event handler","User callback for onaddpolygon event")
	set pInfo($I(pInfo)) = $LB("onaddplacemark","","%ZEN.Datatype.eventHandler","'onaddplacemark' event handler","User callback for onaddplacemark event")
	

	//[+]
	set pInfo($I(pInfo)) = $LB("saveBordersMethod","ClassName;MethodName","%String","Save borders method","Method for save range borders, pattern - 'ClassName;MethodName', method takes a single parameter(object) - {parameterId: X, level: X, parentRegionId:X, minValue: X, maxValue: X}. parentRegionId - may be null if this first level")		
	set pInfo($I(pInfo)) = $LB("getBordersMethod","ClassName;MethodName","%String","Get borders method","Method to get an range borders, pattern - 'ClassName;MethodName', method takes a single parameter(object) - {parameterId: X, level: X, parentRegionId:X}. parentRegionId - may be null if this first level")		
	set pInfo($I(pInfo)) = $LB("getAdditionInfoForObjectById","ClassName;MethodName","%String","Get addition info for object","Method to get an proxyObject with other information, pattern - 'ClassName;MethodName', method takes a single parameter(string) - object id. Call this method like this - 'var otherInfo = zenThis.GetAdditionInformationForObjectById(id);'")		
	

	quit $$$OK
]]></Implementation>
</Method>

<Method name="renderContents">
<Description>
Client-side method to render control.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// get data from controller, if present.
	this.acquireData();
	
	var portlet = this;
	ymaps.ready(function(){
		portlet.initMap();
		portlet.syncPlacemarks();
		portlet.syncPolygons();
	});
]]></Implementation>
</Method>

<Method name="initMap">
<Description>
Initialize the map</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	this._mapObject = null;
	var mapDiv = this.getEnclosingDiv();
	
	// test if we have not been rendered yet
	if (mapDiv == null) return;
	
	mapDiv.style.height = "600px";	
	mapDiv.style.width = "1300px";
	
 	if (('undefined' == typeof ymaps) || ('undefined' == typeof ymaps.Map)) {
		mapDiv.innerHTML = $$$Text('Unable to load yandex map api.');
		return;
	}
	
	this.latitude = parseFloat(this.latitude);
	if (isNaN(this.latitude)) this.latitude = 60;
	
	this.longitude = parseFloat(this.longitude);
	if (isNaN(this.longitude)) this.longitude = 85;
	
	this.zoom = parseInt(this.zoom, 10);
	if (isNaN(this.zoom)) this.zoom = 2;

    var mapOptions = {
        		center: [this.latitude, this.longitude],
       			zoom: this.zoom,
       			controls: [],
    			type: this.mapType ? this.mapType.split(":").pop() : 'yandex#map'
    		};
    		
	this._mapObject = new ymaps.Map(mapDiv, mapOptions);
    this._mapObject.behaviors.enable('scrollZoom',{smooth: false});
    this._mapObject.controls.add('zoomControl',{smooth: false});
		
	// array of placemarks
	this._placemarks = [];
	
	// array of polygons
	this._polygons = [];
	
	// drilldown arrays
	this._prevZoom = [];
	this._prevCenter = [];
	this._drillDownTitle = [];
	
	// create div for dirllUp button
    var drillUpActionComponent = new ymaps.control.Button({
            options: {
                layout: ymaps.templateLayoutFactory.createClass("<div id='" + this.id + "_drillUpActionComponent" + "'></div>")
            }
        });
        
    var duPosition = {left: '5px', top: '5px'};
    if (this.drillUpButtonPosition == "bottom"){
    	duPosition = {left: '5px', bottom: '5px'};
    }
            
    this._mapObject.controls.add(drillUpActionComponent, { float: 'none', position: duPosition });
]]></Implementation>
</Method>

<Method name="getMapObject">
<Description>
Return the google map API object used by the map view.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	return this._mapObject;
]]></Implementation>
</Method>

<Method name="getDrillUpActionComponent">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	return document.getElementById(this.id + '_drillUpActionComponent');
]]></Implementation>
</Method>

<Method name="notifyViewHandler">
<Description>
Notification that the dataController associated with this dataView has raised an event.</Description>
<FormalSpec>reason,data1,data2,data3</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	switch(reason) {
		case 'dataChange':
			this.onApplyFilters(true);
		
		case 'modelChange':
		
			// some change in dataController
			this.acquireData();
			this.syncPlacemarks();
			this.syncPolygons();
			break;
		
		case 'seriesChange':
			break;
	}
]]></Implementation>
</Method>

<Method name="addPlacemark">
<Description><![CDATA[
Add a placemark to the map at given coordinates.<br/>
<var>id</var> is a user-defined identifier associated with the placemark.<br/>
Returns the placemark object.]]></Description>
<FormalSpec>id,latitude,longitude,title,isClickable,icon,data</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var map = this.getMapObject();
	if (!map || isNaN(parseFloat(latitude)) || isNaN(parseFloat(longitude))) return null;
		
	var placemark = new ymaps.Placemark(
		[latitude, longitude], 
		{
			balloonContentHeader: "",
         	balloonContentFooter: "",
         	hintContent: title + ' (' + data.Value + ')'
        });

	// add to list
	placemark._id = id;
	placemark.data = data;
	
	var index = this._placemarks.length;
	this._placemarks[index] = placemark;
	
	var code = new Function('zenPage.getComponent('+this.index+').placemarkClickHandler("'+index+'");');
	placemark.events.add("click",code);
	
	code = new Function('zenPage.getComponent('+this.index+').placemarkRightClickHandler("'+index+'");');
	placemark.events.add("contextmenu",code);
	
	return placemark;
]]></Implementation>
</Method>

<Method name="addPolygon">
<Description><![CDATA[
Add a polygon to the map at given coordinates.<br/>
<var>id</var> is a user-defined identifier associated with the polygon.<br/>
Returns the polygon object.]]></Description>
<FormalSpec>id,coords,color,fo,isClickable,title,data</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var map = this.getMapObject();
    if (!map) return null;

	if (color.substring(0, 4) === "rgb(" && color.indexOf(")") == (color.length - 1) && color.indexOf(".") > -1){
		var colorAr = color.substring(4, color.length - 1).split(",");
		color = "rgb(" + String(parseFloat(colorAr[0])).split(".")[0] + "," + String(parseFloat(colorAr[1])).split(".")[0] + "," + String(parseFloat(colorAr[2])).split(".")[0] + ")";
	}
	
    var polygon = new ymaps.Polygon(
     		coords, 
     		{
	     		hintContent: title + " (" + data.Value + ")"
	     	}, 
     		{
	     		fillColor: (color.substring(0, "hsv2rgb".length) === "hsv2rgb" ? eval(color) : color),
        	 	fillOpacity: fo,
        	 	strokeColor: (color.substring(0, "hsv2rgb".length) === "hsv2rgb" ? eval(color) : color),
        	 	strokeOpacity: (this.strokeOpacity ? this.strokeOpacity : 0.5),
        	 	strokeWeight: (this.strokeWeight ? this.strokeWeight : 3),
    		});

    polygon.data = data;
    polygon.name = "";
	polygon.description = title;
		
	// add to list
	polygon._id = id;
	
	var index = this._polygons.length;
	this._polygons[index] = polygon;
	
	var code = new Function('event', 'zenPage.getComponent('+this.index+').polygonClickHandler("'+index+'", event);');
	polygon.events.add("click", code);
	
	code = new Function('event', 'zenPage.getComponent('+this.index+').polygonRightClickHandler("'+index+'", event);');
	polygon.events.add("contextmenu", code);
		
	code = new Function('event', 'zenPage.getComponent('+this.index+').polygonMouseOver("'+index+'", event);');
	polygon.events.add('MouseEnter', code);
	
	code = new Function('event', 'zenPage.getComponent('+this.index+').polygonMouseMove("'+index+'", event);');
	polygon.events.add('MouseMove', code);

	code = new Function('event', 'zenPage.getComponent('+this.index+').polygonMouseOut("'+index+'", event);');
	polygon.events.add('MouseLeave', code);

	return polygon;
]]></Implementation>
</Method>

<Method name="getPlacemark">
<Internal>1</Internal>
<FormalSpec>index</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	return this._placemarks ? this._placemarks[index] : null;
]]></Implementation>
</Method>

<Method name="getPolygon">
<Internal>1</Internal>
<FormalSpec>index</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	return this._polygons ? this._polygons[index] : null;
]]></Implementation>
</Method>

<Method name="placemarkClickHandler">
<Internal>1</Internal>
<FormalSpec>index</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var map = this.getMapObject();
	if (map){
		var placemark = this.getPlacemark(index);
		if (placemark){
			zenInvokeCallbackMethod(this.onclickplacemark,this,'onclickplacemark','placemark', placemark);
		}
	}
]]></Implementation>
</Method>

<Method name="placemarkRightClickHandler">
<Internal>1</Internal>
<FormalSpec>index</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var map = this.getMapObject();
	if (map){
		var placemark = this.getPlacemark(index);
		if (placemark){
			zenInvokeCallbackMethod(this.onrightclickplacemark,this,'onrightclickplacemark','placemark', placemark);
		}
	}
]]></Implementation>
</Method>

<Method name="polygonClickHandler">
<Internal>1</Internal>
<FormalSpec>index,event</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var map = this.getMapObject();
	if (map){
		var polygon = this.getPolygon(index);
		if (polygon){
			zenInvokeCallbackMethod(this.onclickpolygon, this, 'onclickpolygon', 'polygon', polygon, 'position', event.get('coords'));
		}
	}
]]></Implementation>
</Method>

<Method name="polygonRightClickHandler">
<Internal>1</Internal>
<FormalSpec>index,event</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var map = this.getMapObject();
	if (map){
		var polygon = this.getPolygon(index);
		if (polygon){
			zenInvokeCallbackMethod(this.onrightclickpolygon, this, 'onrightclickpolygon', 'map', map, 'position', event.get('coords'));
		}
	}
]]></Implementation>
</Method>

<Method name="acquireData">
<Description>
Internal method: acquire data for this view and store a copy in a local cache.</Description>
<Internal>1</Internal>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
		
	var controller = this.getController();
	if (null == controller){
		// try to connect to dataController
		this.connectToController();
		controller = this.getController();
	}

	// array of placemark data
	this._placemarkData = [];
	
	if (controller && (this.latitudeProperty != '') && (this.longitudeProperty != '')){
		// get data from controller (make sure data is loaded)
		var dims = controller.getDimensions();
		
		// are we connected to a pivot table?
		var invert = controller.getSelectedRange;
		if (!invert){
			var seriesSize = controller.getDimSize(1);
			var seriesCount = controller.getDimSize(2);
			var labelDim = 2;
			var titleCol = -1;
			var latCol = -1;
			var longCol = -1;
			var clickableCol = -1;
			var miCol = -1;
			var specIconCol = -1;
		}
		else{
			var seriesSize = controller.getDimSize(2);
			var seriesCount = controller.getDimSize(1);
			var labelDim = 1;
		}
		
		if (seriesCount > 0){
			// find long and lat and title columns
			if (!invert){
				for (var p = 0; p < seriesSize; p++){
					var pname = controller.getPropertyName(p);
					if (pname == this.latitudeProperty) {
						latCol = p;
					}
					if (pname == this.longitudeProperty) {
						longCol = p;
					}
					if (pname == this.placemarkTitleProperty) {
						titleCol = p;
					}
					if (pname == this.isClickableProperty) {
						clickableCol = p;
					}
					if (pname == this.placemarkIconProperty) {
						miCol = p;
					}
					if (pname == this.placemarkSpecialProperty) {
						specIconCol = p;
					}
				}
			}
			
			// each series corresponds to a placemark
			if (invert || (latCol >= 0 && longCol >= 0)){
				for (var n = 0; n < seriesCount; n++){
					var isClickable = 1;
					var mi = null;
					var specIcon = 0;
					var sname = controller.getLabel(n,labelDim);

					if (!invert){
						var lat = controller.getData(latCol,n);
						var long = controller.getData(longCol,n);
						if (titleCol >= 0) sname = controller.getData(titleCol,n);
						if (clickableCol >= 0) isClickable = controller.getData(clickableCol,n);
						if (miCol >= 0) mi = controller.getData(miCol,n);
						if (specIconCol >= 0) specIcon = controller.getData(specIconCol,n);
					}
					else{
						var lat = controller.getDataByName(this.latitudeProperty,n);
						var long = controller.getDataByName(this.longitudeProperty,n);
						if (this.placemarkTitleProperty != '') sname = controller.getDataByName(this.placemarkTitleProperty,n);
						if (this.isClickableProperty != '') isClickable = controller.getDataByName(this.isClickableProperty,n);
						if (this.placemarkIconProperty != '') mi = controller.getDataByName(this.placemarkIconProperty,n);
						if (this.placemarkSpecialProperty != '') specIcon = controller.getDataByName(this.placemarkSpecialProperty,n);
					}
			
					if (!isNaN(parseFloat(lat)) && !isNaN(parseFloat(long))){
						var data = [];
						if (this.placemarkDataProperties != ''){
							var props = this.placemarkDataProperties.split(",");
							for (var i = 0; i < props.length; i++){
							    data[props[i]] = controller.getDataByName(props[i],n);
							}
						}
						
						if (!mi) mi = this.placemarkIcon;
					
						this._placemarkData[this._placemarkData.length] = {
							title: sname,
							latitude: lat,
							longitude: long,
							isClickable: (!isClickable ? 1 : isClickable),
							icon: mi,
							specialIcon: specIcon,
							data: data
						};
					}
				}
			}
		}
	}
	
	// array of polygon data
	this._polygonData = [];
	
	if (this.coordsJsFile && !this._polygonCoords){
		this._polygonCoords = [];
		loadCoordinates(this._polygonCoords);
	}
	
	if (controller && (this.coordsProperty != '')){
		// get data from controller (make sure data is loaded)
		var dims = controller.getDimensions();
		
		// are we connected to a pivot table?
		var invert = controller.getSelectedRange;
		if (!invert){
			var seriesSize = controller.getDimSize(1);
			var seriesCount = controller.getDimSize(2);
			var labelDim = 2;
			var titleCol = -1;
			var coordsCol = -1;
			var colorCol = -1;
			var foCol = -1;
			var clickableCol = -1;
		}
		else{
			var seriesSize = controller.getDimSize(2);
			var seriesCount = controller.getDimSize(1);
			var labelDim = 1;
		}

		if (seriesCount > 0){
			// find coords and color columns
			if (!invert){
				for (var p = 0; p < seriesSize; p++){
					var pname = controller.getPropertyName(p);
					if (pname == this.coordsProperty){
						coordsCol = p;
					}
					if (pname == this.colorProperty){
						colorCol = p;
					}
					if (pname == this.fillOpacityProperty){
						foCol = p;
					}
					if (pname == this.isClickableProperty){
						clickableCol = p;
					}					
					if (pname == this.polygonTitleProperty){
						titleCol = p;
					}
				}
			}
			
			// each series corresponds to a poly
			for (var n = 0; n < seriesCount; n++){
				var color = 'purple';
				var fo = this.fillOpacity;  // default opacity
				var isClickable = 1;
				
				var sname = controller.getLabel(n,labelDim);

				if (!invert){
					if (coordsCol<0) break;
					var coords = controller.getData(coordsCol,n);
					if (colorCol >= 0) color = controller.getData(colorCol,n);
					if (foCol >= 0) fo = controller.getData(foCol,n);
					if (clickableCol >= 0) isClickable = controller.getData(clickableCol,n);
					if (titleCol >= 0) sname = controller.getData(titleCol,n);
				}
				else{
					var coords = controller.getDataByName(this.coordsProperty,n);
					if (this.colorProperty != '') color = controller.getDataByName(this.colorProperty,n);
					if (this.fillOpacityProperty != '') fo = controller.getDataByName(this.fillOpacityProperty,n);
					if (this.isClickableProperty != '') isClickable = controller.getDataByName(this.isClickableProperty,n);
					if (this.polygonTitleProperty != '') sname = controller.getDataByName(this.polygonTitleProperty,n);
				}
				
				if (!fo) fo = this.fillOpacity;  // default opacity

				if (this.coordsJsFile) coords = this._polygonCoords[coords];
				
				if (!coords) continue;
				
				var pathsSets = coords.split(";");
				for (var j = 0; j < pathsSets.length; j++){
					var paths = pathsSets[j].split(" ");
					for (var i = 0; i < paths.length; i++){
						var p = paths[i].split(",");
					    paths[i] = [p[1], p[0]];
					}
					pathsSets[j] = paths;
				}
				
				var data = [];
			
				if (this.polygonDataProperties != ''){
					var props = this.polygonDataProperties.split(",");
					for (var i = 0; i < props.length; i++){
					    data[props[i]] = controller.getDataByName(props[i],n);
					}
				}
				
				this._polygonData[this._polygonData.length] = {
					title: sname,
					coords: pathsSets,
					color: (!color ? 'purple' : color),
					fo: (!fo ? 0.1 : fo),
					isClickable: (!isClickable ? 1 : isClickable),
					data: data
				};
			}
		}
	}
]]></Implementation>
</Method>

<Method name="syncPlacemarks">
<Description>
Internal method: sync placemarks to data from controller.</Description>
<Internal>1</Internal>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	this.clearPlacemarks();
	
	var map = this.getMapObject();
	var controller = this.getController();
	
	if (!map || !controller || !this._placemarkData) return;
			
	try {	
		for (var n = 0; n < this._placemarkData.length; n++){
			var md = this._placemarkData[n];
			if (md){
				var placemark = this.addPlacemark(n, md.latitude, md.longitude, md.title, md.isClickable, md.icon, md.data);
				if (placemark && md.title){
					map.geoObjects.add(placemark); 
				}
			}
		}
	}
	catch(ex) {
		alert('Error in syncPlacemarks ' + ex.message);
	}
]]></Implementation>
</Method>

<Method name="syncPolygons">
<Description>
Internal method: sync polygons to data from controller.</Description>
<Internal>1</Internal>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	this.clearPolygons();	
	
	var map = this.getMapObject();
	var controller = this.getController();
	
	if (!map || !controller || !this._polygonData) return;
	
	try {
		for (var n = 0; n < this._polygonData.length; n++){
			var md = this._polygonData[n];
			if (md){
				

				var poly = this.addPolygon(n, md.coords, md.color, md.fo, md.isClickable, md.title, md.data);
				if (poly && md.title){ 
					map.geoObjects.add(poly);
				}	
			}
		}
	}
	catch(ex) {
		alert('Error in syncPolygons ' + ex.message);
	}
]]></Implementation>
</Method>

<Method name="getColor">
<Description>
Calculate color for polygon</Description>
<FormalSpec>min,max,value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (!value) return 'rgb(0,0,0)';
	
	// –ö—Ä–∞–π–Ω–∏–∏ –≥—Ä–∞–Ω–∏—Ü—ã: –∫—Ä–∞—Å–Ω—ã–π –∏ –∑–µ–ª–µ–Ω—ã–π, —Ü–≤–µ—Ç –¥–ª—è —Å–µ—Ä–µ–¥–∏–Ω—ã - –∂–µ–ª—Ç—ã–π
	var middle = (max + min) / 2;
	
	if (value <= middle)
    {
        var redPart = (value - min) / (middle - min);
        return "rgb(" + Math.round(255 * redPart) + ",255, 0)";
    }
    else
    {
        var greenPart = (max - value) / (max - middle);
        return "rgb(255," + Math.round(255 * greenPart) + ", 0)";
    }
]]></Implementation>
</Method>

<Method name="getControl">
<Description>
Obtain a reference to a filter (or any other widget control).</Description>
<FormalSpec>ind</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	console.log('getControl(ind)');
	//------------------------------
		
    return zenPage.getComponent(this.parent.parent.controlIndices[ind]);
]]></Implementation>
</Method>

<Method name="openBallonAtPosition">
<Description>
Show an info window at the specified position.</Description>
<FormalSpec>position,content</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var map = this.getMapObject();
	
	if (map && position){
		map.balloon.open(position, {contentBody: content});
	}
]]></Implementation>
</Method>

<Method name="clearPlacemarks">
<Description>
Internal method: clear placemarks from map.</Description>
<Internal>1</Internal>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	try {
		// kill old placemarks
		if (this._placemarks) {
			for (var n = 0; n < this._placemarks.length; n++) {
				this._mapObject.geoObjects.remove(this._placemarks[n]);
			}
		}
		this._placemarks = [];
	}
	catch(ex) {
		alert('Error in clearPlacemarks ' + ex.message);
	}
]]></Implementation>
</Method>

<Method name="clearPolygons">
<Description>
Internal method: clear polygons from map.</Description>
<Internal>1</Internal>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	try {
		// kill old polygons
		var map = this.getMapObject();
		if (this._polygons) {
			for (var n = 0; n < this._polygons.length; n++) {
				map.geoObjects.remove(this._polygons[n]);
			}
		}
		this._polygons = [];
	}
	catch(ex) {
		alert('Error in clearPolygons ' + ex.message);
	}
]]></Implementation>
</Method>

<Method name="getFilterStateArray">
<Description>
Get the array of filter state information for the widget.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	console.log('getFilterStateArray()');
	//------------------------------
	
	
	return this.parent.parent.getFilterStateArray();
]]></Implementation>
</Method>

<Method name="panToAddress">
<Description>
Invoke the google geocoder api to lookup an address string and move the map to view it.
Applications that call this are responsible for adhering to the google geocoder api terms of use.</Description>
<FormalSpec>address</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	console.log('panToAddress(address)');
	//------------------------------
	
	
	if (('undefined' == typeof yandex)||('undefined' == typeof yandex.maps)) {
		return '';
	}

	var callback = new Function('results','status','zenPage.getComponent('+this.index+').geocodeAddressHandler(results,status)');
	var geocoder = new google.maps.Geocoder();
	geocoder.geocode({ 'address': address}, callback);
]]></Implementation>
</Method>

<Method name="geocodeAddressHandler">
<Description>
Callback for geocoder API.</Description>
<Internal>1</Internal>
<FormalSpec>results,status</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	console.log('geocodeAddressHandler(results, status)');
	//------------------------------
		
	if (status == google.maps.GeocoderStatus.OK) {
		var map = this.getMapObject();
		if (map) {
			map.setCenter(results[0].geometry.location);
		}
	}
	else {
		alert("Address not found: " + status);
	}
]]></Implementation>
</Method>

<Method name="%DrawHTML">
<Implementation><![CDATA[
	
	// This causes ZEN to render this component on the client.
	set ..renderFlag = ..renderFlag + 1
	
	// copy ..settings into properties
	#dim propName As %String = $order(..settings(""))
	while (propName '= "")
	{
		if ("" '= $get(..settings(propName)))
			try
			{
				set $property($this, propName) = ..settings(propName)
			}
			catch {}

		set propName = $order(..settings(propName))
	}
	
	&html<
	
	<script type="text/javascript">
	function hsv2rgb(h,s,v) 
	{
		// Adapted from http://www.easyrgb.com/math.html
		// hsv values = 0 - 1, rgb values = 0 - 255
		var r, g, b;
		var RGB = new Array();
		if(s == 0)
		{
		  RGB['red']=RGB['green']=RGB['blue']=Math.round(v*255);
		}
		else
		{
		  var var_h = h * 6;  // h must be < 1
		  if (var_h == 6) var_h = 0;
		  var var_i = Math.floor( var_h );
		  var var_1 = v*(1-s);
		  var var_2 = v*(1-s*(var_h-var_i));
		  var var_3 = v*(1-s*(1-(var_h-var_i)));
		  if (var_i == 0)
		  {
		    var_r = v; 
		    var_g = var_3; 
		    var_b = var_1;
		  }
		  else if (var_i == 1)
		  {
		    var_r = var_2;
		    var_g = v;
		    var_b = var_1;
		  }
		  else if (var_i == 2)
		  {
		    var_r = var_1;
		    var_g = v;
		    var_b = var_3
		  }
		  else if (var_i == 3)
		  {
		    var_r = var_1;
		    var_g = var_2;
		    var_b = v;
		  }
		  else if (var_i == 4)
		  {
		    var_r = var_3;
		    var_g = var_1;
		    var_b = v;
		  }
		  else
		  {
		    var_r = v;
		    var_g = var_1;
		    var_b = var_2
		  }
		  RGB['red'] = Math.round(var_r * 255);
		  RGB['green'] = Math.round(var_g * 255);
		  RGB['blue'] = Math.round(var_b * 255);
		}
		return '#' + RGB['red'].toString(16) + RGB['green'].toString(16) + RGB['blue'].toString(16);
	};
	</script>>
	
	if (..coordsJsFile '= "")
	{
		&html<<script type='text/javascript' src='#(..coordsJsFile)#'></script>>
	}
]]></Implementation>
</Method>

<Method name="onApplyFilters">
<Internal>1</Internal>
<FormalSpec>refresh</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[

	zenInvokeCallbackMethod(this.onapplyfilters,this,'onapplyfilters','refresh',refresh);
]]></Implementation>
</Method>

<Method name="drillDown">
<Description>
Perform a drilldown</Description>
<Internal>1</Internal>
<FormalSpec>title,latLng,zoom,data</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	console.log('portlet drillDown');
	
	var map = this.getMapObject();
	if (!map) return;
	
	this._prevZoom.push(map.getZoom());
	this._prevCenter.push(map.getCenter());
	
	map.setZoom(parseInt(zoom));
	map.setCenter(latLng);
	
	this._drillDownTitle.push(title);
	this.setDrillDownTitle(title);
	
	zenInvokeCallbackMethod(this.ondrilldown, this, 'ondrilldown', 'data', data);
]]></Implementation>
</Method>

<Method name="setDrillDownTitle">
<Internal>1</Internal>
<FormalSpec>title</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var du = this.getDrillUpActionComponent();
	du.innerHTML = '';
	
	if (!title)	return;
	
	var divBtn = document.createElement('div');
	var portlet = this;
	divBtn.onclick = function(){portlet.drillUp()};
	divBtn.appendChild(document.createTextNode('<<  ' + '–ù–∞–∑–∞–¥'));
	divBtn.style.cursor = 'pointer';
	divBtn.style.border = 'solid 1px #000000';
	divBtn.style.color = '#ffffff';
	divBtn.style.backgroundColor = '#356B8D';
	divBtn.style.MozBoxShadow = '2px 2px 4px #7f7f7f';
	divBtn.style.boxShadow = '2px 2px 4px #7f7f7f';
	divBtn.style.whiteSpace = 'nowrap';
	divBtn.style.font = 'icon';
	divBtn.style.padding = '2px 8px'; 
	divBtn.style.display = 'block';
	
	if (navigator.userAgent.indexOf("Safari")>=0 || navigator.userAgent.indexOf("Chrome")>=0){
		divBtn.style.fontFamily = "Tahoma,sans-serif";
		divBtn.style.fontSize = "13px";
	}
	
	
	var divTitle = document.createElement('div');
	divTitle.appendChild(document.createTextNode(title));
	divTitle.style.border = 'solid 1px #000000';
	divTitle.style.color = '#000000';
	divTitle.style.MozBoxShadow = '2px 2px 4px #7f7f7f';
	divTitle.style.boxShadow = '2px 2px 4px #7f7f7f';
	divTitle.style.whiteSpace = 'nowrap';
	divTitle.style.font = 'icon';
	divTitle.style.fontWeight = 'bold';
	divTitle.style.padding = '2px 8px'; 
	divTitle.style.display = 'block';
	
	if (navigator.userAgent.indexOf("MSIE")>=0){
		divTitle.style.backgroundColor = 'white';
	}
	else{
		divTitle.style.backgroundColor = 'rgba(255, 255, 255, 0.8)';
	}
	
	if (navigator.userAgent.indexOf("Safari")>=0 || navigator.userAgent.indexOf("Chrome")>=0){
		divTitle.style.fontFamily = "Tahoma,sans-serif";
		divTitle.style.fontSize = "13px";
	}
	
	du.style.display = 'flex';
	du.appendChild(divBtn);
	du.appendChild(divTitle);
]]></Implementation>
</Method>

<Method name="centerChangedHandler">
<Internal>1</Internal>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	//console.log('test 32');
	//if (this._drillDownTitle.length > 0) this._drillDownTitle[this._drillDownTitle.length - 1].draw();
]]></Implementation>
</Method>

<Method name="drillUp">
<Description>
Restores map parameters (center, zoom and "drilldown title") to their state before drilldown was performed</Description>
<Internal>1</Internal>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var map = this.getMapObject();
	if (!map) return;
	
	if (this._drillDownTitle.length > 0){
		this._drillDownTitle.pop();
		this.setDrillDownTitle(this._drillDownTitle[this._drillDownTitle.length - 1]);
	}
	
	if (this._prevZoom.length > 0){
		map.setZoom(this._prevZoom[this._prevZoom.length - 1]);
		this._prevZoom.pop();
	}
		
	if (this._prevCenter.length > 0){
		map.setCenter(this._prevCenter[this._prevCenter.length - 1]);
		this._prevCenter.pop();
	}
	
	zenInvokeCallbackMethod(this.ondrillup, this, 'ondrillup');
]]></Implementation>
</Method>
</Class>
</Export>
